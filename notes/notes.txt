Obiekt XMLHttpRequest

const getUserData = () => {
 
    // utworzenie obiektu
    let httpReq = new XMLHttpRequest();
 
    // otwarcie połączenia - https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open
    httpReq.open('GET', 'https://jsonplaceholder.typicode.com/users/1');
 
 
    // jeśli status połączenia został zmieniony -> httpReq.readyState
    // 0: połączenie nie nawiązane,
    // 1: połączenie nawiązane,
    // 2: żądanie odebrane,
    // 3: przetwarzanie,
    // 4: dane zwrócone i gotowe do użycia.
    // https://www.w3schools.com/xml/ajax_xmlhttprequest_response.asp
    httpReq.onreadystatechange = () => {
 
        // console.log(httpReq.readyState);
 
        // jeśli 4: dane zwrócone i gotowe do użycia
        if (httpReq.readyState === 4) {
 
            // Kody statusu połączenia HTTP - https://pl.wikipedia.org/wiki/Kod_odpowiedzi_HTTP
            if (httpReq.status === 200) {
 
                let data = httpReq.responseText;
                let dataJSON = JSON.parse(data);
                // console.log(data);
                // console.log(dataJSON);
                console.log(dataJSON.name);
                console.log(dataJSON.email);
 
                // zwolnij obiekt, aby nie utrzymywać nie potrzebnego już połączenia z serwerem
                httpReq = null;
            }
        }
 
    }
 
    httpReq.send();
}


--------------

Fetch API

setInterval(() => {
    fetch('https://jsonplaceholder.typicode.com/users/1')
    .then(response => response.json())
    .then((data) => {
 
        console.log(data.name);
        console.log(data.email);
    });   
}, 10000);



Fetch API definiuje 2 główne obiekty:

Request – https://developer.mozilla.org/en-US/docs/Web/API/Request
Response – https://developer.mozilla.org/en-US/docs/Web/API/Response
-----


AJAX - JQUERY

Metoda $.get()
Biblioteka jQuery ułatwia tworzenie AJAX’owych zapytań – służy do tego metoda $.get()
Pozwala na pobieranie danych w dowolnym formacie, np. JSON lub XML.

Metoda $.get() przyjmuje przynajmniej jeden parametr – źródło, z którego pobierane mają być dane.

Pierwszym sposobem jej użycia jest podanie drugiego parametru, którym jest funkcja anonimowa. Funkcja ta wykona się w chwili, kiedy dane zostaną prawidłowo pobrane.

$.get('https://jsonplaceholder.typicode.com/users/1', function(data) {
    console.log(data);
});

Innym sposobem użycia metody $.get() jest wywołanie jej z jednym parametrem, czyli źródłem danych:

?
1
$.get('https://jsonplaceholder.typicode.com/users/1')
W ten sposób otrzymujemy obiekt jqXHR.

Więcej na temat obiektu jqXHR: https://api.jquery.com/Types/#jqXHR

Na tym obiekcie mamy możliwość wywołania kilku metod: .then(), .done(), .fail(), .pipe(), .progress(), .state(), .promise().
 
Metoda .done() jest uruchamiana, kiedy dane zostają pobrane i są gotowe go użycia.

$.get('https://jsonplaceholder.typicode.com/users/1')
    .done(function(data) {
        console.log(data);
        console.log(data.name);
        console.log(data.email);            
    })


Metoda .fail() daje możliwość podpięcia obsługi błędów. Uruchamia się w momencie wystąpienia błędu, np. problemu z połączeniem.

$.get('https://jsonplaceholder.typicode.com/users/1')
    .fail(function(error) {
        console.error(error);
    })


Więcej na temat $.get(): https://api.jquery.com/jQuery.get/

Metoda $.getJSON()
Metoda jQuery .getJSON() pozwala na pobieranie danych w formacie JSON.

Metoda ta działa bardzo podobnie do $.get(), z tą różnicą, że nie mamy możliwości pobrać danych w innym formacie niż JSON.
 
Dokładnie tak jak w przypadku metody $.get(), $.getJSON() możemy użyć na dwa sposoby:

1. Podając dwa parametry (źródło danych oraz funkcja anonimowa)
 
Przykład:
$.getJSON('https://jsonplaceholder.typicode.com/users/1', function(data) {
    console.log(data);
    console.log(data.name);
    console.log(data.email);
});

2. Podając jeden parametr (źródło danych)
$.getJSON('https://jsonplaceholder.typicode.com/users/1')
        .done(function(data) {
            console.log(data);
            console.log(data.name);
            console.log(data.email);            
        })
        .fail(function(error) {
            console.error(error);
        })


Metoda $.ajax()
Funkcja $.ajax() daje możliwość pobierania/wysyłania danych w dowolnym formacie, np. JSON lub XML oraz za pomocą dowolnej metody (GET, POST, PUT, DELATE, OPTION).

Funkcja ta daje duże możliwości dostosowywania jej użycia – można tworzyć obsługę błędów, wykonywać operacje w zależności od zwróconego błędu (np. błąd z kodem 404).
 
Pierwszym sposobem użycia $.ajax() jest wywołanie tej funkcji z jednym parametrem – obiektem przechowującym ustawienia połączenia.
 
Przykład:
$.ajax({
    url: 'https://jsonplaceholder.typicode.com/users/1',
    statusCode: {
        200: function() {
            console.log(`OK - wszystko gra :)`);
        }
    },
    success: function(data) {
 
        console.log(data);
        console.log(data.name);
        console.log(data.email);
    },
    error: function(error) {
        console.error(error);
    },
}); 

Gdzie:

url – źródło danych
statusCode – funkcje wywoływane po otrzymaniu określonego kodu
success – funkcja wywoływana po prawidłowym otrzymaniu danych
error – funkcja uruchamiana w momencie pojawienia się błędu
 
Drugim sposobem jest użycie metod dostępnych dla obiektu jqXHR
$.ajax() podobnie jak w metody $.get(), czy $.getJSON() zwraca dane jako obiekt jqXHR. Z tego powodu mamy do dyspozycji metody takie jak .done() czy .fail()

$.ajax({
    url: 'https://jsonplaceholder.typicode.com/users/1',
    statusCode: {
        200: function() {
            console.log(`OK - wszystko gra :)`);
        }
    },
})
.done(function(data) {
 
    console.log(data);
    console.log(data.name);
    console.log(data.email);
})
.fail(function(error) {
    console.error(error);
})




